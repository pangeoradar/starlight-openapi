---
import { slug } from 'github-slugger'

import type { StarlightOpenAPISchemaConfig } from '../../libs/schema'
import {
  getNullable,
  getSchemaObjects,
  isSchemaObjectAllOf,
  isSchemaObjectObject,
  type SchemaObject,
} from '../../libs/schemaObject'
import Example from '../example/Example.astro'
import ExternalDocs from '../ExternalDocs.astro'
import Items from '../Items.astro'
import Md from '../Md.astro'
import Type from '../Type.astro'

import SchemaObjectAllOf from './SchemaObjectAllOf.astro'
import SchemaObjectObject from './SchemaObjectObject.astro'
import SchemaObjects from './SchemaObjects.astro'

interface Props {
  hideExample?: boolean | undefined
  negated?: boolean
  nested?: boolean
  schemaObject: SchemaObject
  config?: StarlightOpenAPISchemaConfig
  collapsable?: boolean | undefined;
}

const { collapsable, hideExample = false, negated, nested = false, schemaObject, config } = Astro.props

const schemaObjects = getSchemaObjects(schemaObject)

const hasMany = schemaObjects !== undefined
const isNegated = schemaObject.not !== undefined
---

{
  schemaObject['x-identifier'] && config && (
    <div>
      <span>Schema: </span>
      <Type>
        <a class="identifier" href={`/${config?.base}/schemas/#${slug(schemaObject['x-identifier'])}`}>
          {schemaObject['x-identifier']}
        </a>
      </Type>
    </div>
  )
}

{
  hasMany ? (
    <SchemaObjects discriminator={schemaObject.discriminator} {nested} {schemaObjects} />
  ) : isNegated ? (
    <Astro.self negated schemaObject={schemaObject.not} />
  ) : (
    <>
      <Md text={schemaObject.description} />
      <ExternalDocs docs={schemaObject.externalDocs} />
      {isSchemaObjectObject(schemaObject) ? (
        <SchemaObjectObject {nested} {schemaObject} {collapsable} />
      ) : isSchemaObjectAllOf(schemaObject) ? (
        <SchemaObjectAllOf {schemaObject} {collapsable} />
      ) : (
        <Items items={schemaObject} {negated} nullable={getNullable(schemaObject)} />
      )}
    </>
  )
}
