---
import { getBound, getType, getTypeWithSchema, type Items } from '../libs/items'
import { isSchemaObjectObject } from '../libs/schemaObject'

import SchemaObject from './schema/SchemaObject.astro'
import Tag from './Tag.astro'
import Tags from './Tags.astro'
import Type from './Type.astro'
import {StarlightOpenAPISchemaConfig} from "../libs/schema";
import {slug} from "github-slugger";

interface Props {
  hideExample?: boolean
  items: Items
  negated?: boolean | undefined
  nullable?: boolean | undefined
  config?: StarlightOpenAPISchemaConfig
}

const { hideExample, config, items, negated, nullable } = Astro.props

const { type, schema } = getTypeWithSchema(items);
const enumItems = items.enum ?? items.items?.enum
const commonTypes = ['string', 'boolean', 'integer', 'number', 'object', 'array', 'null'];
const isCustomSchema = /^[A-Z]/.test(schema ?? '');
---

{
  items.type && (
    <div>
        {isCustomSchema && config
            ? (
                  <Type>
                <a href={`/astro/${config?.base}/schemas/#${slug(schema)}`} class="schema-link">
                    {negated && 'not '}
                    {getType(items)}
                </a>
                  </Type>
            )
            : (
                <Type>
                    {negated && 'not '}
                    {getType(items)}
                  </Type>
                )
        }
      {items.format && <Tag>format: {items.format}</Tag>}
    </div>
  )
}

<Tags
  tags={[
    items.default && `default: ${items.default}`,
    nullable && 'nullable',
    getBound(items, 'minimum'),
    getBound(items, 'maximum'),
    items.minLength && `>= ${items.minLength} characters`,
    items.maxLength && `<= ${items.maxLength} characters`,
    items.minItems && `>= ${items.minItems} items`,
    items.maxItems && `<= ${items.maxItems} items`,
    items.pattern && `/${items.pattern}/`,
    items.multipleOf && `multiple of ${items.multipleOf}`,
    items.uniqueItems && 'unique items',
  ]}
/>

{enumItems && <Tags label="Allowed values:" tags={enumItems} />}

<style>
    .schema-link {
        color: var(--sl-color-text-accent);
    }
</style>
